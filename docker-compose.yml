version: "3.7"

services:
  biweb:
    image: breedinginsight/biweb:latest
    container_name: biweb
    restart: always
    depends_on:
      - biapi
    environment:
      - API_BASE_URL=${API_BASE_URL}
      - ANALYTICS_GTAG_ID=${ANALYTICS_GTAG_ID}
      - SANDBOX_MODE=${SANDBOX_MODE}
      - BRAPI_REFERENCE_SOURCE=${BRAPI_REFERENCE_SOURCE}
      - BRAPI_VENDOR_SUBMISSION_ENABLED=${BRAPI_VENDOR_SUBMISSION_ENABLED:-false}
    networks:
      upstream:
  biapi:
    container_name: biapi
    image: breedinginsight/biapi:latest
    restart: always
    depends_on:
      - bidb
      - brapi-server
    environment:
      - API_INTERNAL_PORT=${API_INTERNAL_PORT:-8081}
      - DB_SERVER=${DB_SERVER:-dbserver:5432}
      - DB_NAME=${DB_NAME:-bidb}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD}
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID}
      - JWT_DOMAIN=${JWT_DOMAIN:-localhost}
      - JWT_SECRET=${JWT_SECRET}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET}
      - OAUTH_AUTH_URL=${OAUTH_AUTH_URL:-https://sandbox.orcid.org/oauth/authorize}
      - OAUTH_TOKEN_URL=${OAUTH_TOKEN_URL:-https://sandbox.orcid.org/oauth/token}
      - OAUTH_OPENID_ISSUER=${OAUTH_OPENID_ISSUER:-https://sandbox.orcid.org}
      - OAUTH_OPENID_JWKSURI=${OAUTH_OPENID_JWKSURI:-https://sandbox.orcid.org/oauth/jwks}
      - OAUTH_OPENID_USERINFOURL=${OAUTH_OPENID_USERINFOURL:-https://sandbox.orcid.org/oauth/userinfo}
      - BRAPI_DEFAULT_URL=${BRAPI_DEFAULT_URL}
      - BRAPI_REFERENCE_SOURCE=${BRAPI_REFERENCE_SOURCE}
      - BRAPI_READ_TIMEOUT=${BRAPI_READ_TIMEOUT:-10m}
      - WEB_BASE_URL=${WEB_BASE_URL}
      - EMAIL_RELAY_HOST=${EMAIL_RELAY_HOST}
      - EMAIL_RELAY_PORT=${EMAIL_RELAY_PORT}
      - EMAIL_FROM=${EMAIL_FROM}
      - REDIS_URL=${REDIS_URL}
      - REDIS_TIMEOUT=${REDIS_TIMEOUT:-30s}
      - REDIS_SSL=${REDIS_SSL:-false}
      - GIGWA_HOST=${GIGWA_HOST}
      - GIGWA_USER=${GIGWA_USER}
      - GIGWA_PASSWORD=${GIGWA_PASSWORD}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_KEY=${AWS_SECRET_KEY}
      - AWS_GENO_BUCKET=${AWS_GENO_BUCKET}
      - AWS_S3_ENDPOINT=${AWS_S3_ENDPOINT:-https://s3.us-east-1.amazonaws.com}
      - BRAPI_VENDOR_SUBMISSION_ENABLED=${BRAPI_VENDOR_SUBMISSION_ENABLED:-false}
    networks:
      backend:
      protected:
  brapi-server:
    image: breedinginsight/brapi-java-server:latest
    container_name: brapi-server
    restart: always
    depends_on:
      - bidb
    environment:
      - BRAPI_DB_SERVER=${BRAPI_DB_SERVER}
      - BRAPI_DB=${BRAPI_DB}
      - BRAPI_DB_USER=${BRAPI_DB_USER}
      - BRAPI_DB_PASSWORD=${BRAPI_DB_PASSWORD}
    volumes:
      - ./bi-api/src/main/resources/brapi/properties/application.properties:/home/brapi/properties/application.properties
      - ./bi-api/src/main/resources/brapi/sql:/home/brapi/db/sql
    networks:
      backend:
        aliases:
          - brapiserver
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/brapi/v2/serverinfo || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
  mailhog:
    image: mailhog/mailhog:latest
    container_name: mailhog
    restart: always
    ports:
      - ${MAILHOG_WEB_PORT:-8025}:8025
      - ${MAILHOG_PORT:-1025}:1025
    networks:
      backend:
  bidb: 
    image: postgres:11.4
    environment:
      POSTGRES_DB: 'bidb'
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    container_name: bidb
    restart: always
    volumes:
      - type: volume
        source: biapi_data
        target: /var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - dbserver
    shm_size: 2g
  # biwaf:
  #   image: franbuehler/modsecurity-crs-rp
  #   container_name: waf
  #   environment:
  #     - PORT=8001
  #     - BACKEND=http://biapi:8081
  #     - PARANOIA=1
  #     - ANOMALYIN=5
  #     - ANOMALYOUT=4
  #   networks:
  #     protected:
  #       aliases:
  #         - waf
  #     upstream:
  #       aliases:
  #         - waf
  biproxy:
    container_name: biproxy    
    image: biproxy
    restart: always
    build:
      dockerfile: biproxy.docker
      context: ./proxy
      args:
        - REGISTERED_DOMAIN=${REGISTERED_DOMAIN:-localhost}
        - API_IP=biapi:8081
        - WEB_IP=biweb:8080
    depends_on:
      - biapi
      - biweb
    ports:
      - 80:80
      - 443:443
    volumes:
      - type: volume
        source: tls_certs
        target: /etc/letsencrypt
      - type: volume
        source: proxy_config
        target: /etc/nginx/conf.d
    healthcheck:
      test: ["CMD-SHELL", "curl -so /dev/null http://localhost/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      upstream:
      protected:
      
networks:
  upstream:
  backend:
  protected:

volumes:
  proxy_config:
    name: proxy_config
  tls_certs:
    name: tls_certs
  biapi_data:
    name: biapi_data
